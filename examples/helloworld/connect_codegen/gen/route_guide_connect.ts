// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.0.0-rc1 with parameter "target=ts"
// @generated from file route_guide.proto (package routeguide, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Feature, Point, Rectangle, RouteNote, RouteSummary } from "./route_guide_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Interface exported by the server.
 *
 * @generated from service routeguide.RouteGuide
 */
export const RouteGuide = {
  typeName: "routeguide.RouteGuide",
  methods: {
    /**
     * A simple RPC.
     *
     * Obtains the feature at a given position.
     *
     * A feature with an empty name is returned if there's no feature at the given
     * position.
     *
     * @generated from rpc routeguide.RouteGuide.GetFeature
     */
    getFeature: {
      name: "GetFeature",
      I: Point,
      O: Feature,
      kind: MethodKind.Unary,
    },
    /**
     * A server-to-client streaming RPC.
     *
     * Obtains the Features available within the given Rectangle.  Results are
     * streamed rather than returned at once (e.g. in a response message with a
     * repeated field), as the rectangle may cover a large area and contain a
     * huge number of features.
     *
     * @generated from rpc routeguide.RouteGuide.ListFeatures
     */
    listFeatures: {
      name: "ListFeatures",
      I: Rectangle,
      O: Feature,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * A client-to-server streaming RPC.
     *
     * Accepts a stream of Points on a route being traversed, returning a
     * RouteSummary when traversal is completed.
     *
     * @generated from rpc routeguide.RouteGuide.RecordRoute
     */
    recordRoute: {
      name: "RecordRoute",
      I: Point,
      O: RouteSummary,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * A Bidirectional streaming RPC.
     *
     * Accepts a stream of RouteNotes sent while a route is being traversed,
     * while receiving other RouteNotes (e.g. from other users).
     *
     * @generated from rpc routeguide.RouteGuide.RouteChat
     */
    routeChat: {
      name: "RouteChat",
      I: RouteNote,
      O: RouteNote,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

