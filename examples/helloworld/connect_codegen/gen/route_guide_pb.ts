// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file route_guide.proto (package routeguide, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Points are represented as latitude-longitude pairs in the E7 representation
 * (degrees multiplied by 10**7 and rounded to the nearest integer).
 * Latitudes should be in the range +/- 90 degrees and longitude should be in
 * the range +/- 180 degrees (inclusive).
 *
 * @generated from message routeguide.Point
 */
export class Point extends Message<Point> {
  /**
   * @generated from field: int32 latitude = 1;
   */
  latitude = 0;

  /**
   * @generated from field: int32 longitude = 2;
   */
  longitude = 0;

  constructor(data?: PartialMessage<Point>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "routeguide.Point";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latitude", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "longitude", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Point {
    return new Point().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJsonString(jsonString, options);
  }

  static equals(a: Point | PlainMessage<Point> | undefined, b: Point | PlainMessage<Point> | undefined): boolean {
    return proto3.util.equals(Point, a, b);
  }
}

/**
 * A latitude-longitude rectangle, represented as two diagonally opposite
 * points "lo" and "hi".
 *
 * @generated from message routeguide.Rectangle
 */
export class Rectangle extends Message<Rectangle> {
  /**
   * One corner of the rectangle.
   *
   * @generated from field: routeguide.Point lo = 1;
   */
  lo?: Point;

  /**
   * The other corner of the rectangle.
   *
   * @generated from field: routeguide.Point hi = 2;
   */
  hi?: Point;

  constructor(data?: PartialMessage<Rectangle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "routeguide.Rectangle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lo", kind: "message", T: Point },
    { no: 2, name: "hi", kind: "message", T: Point },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rectangle {
    return new Rectangle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rectangle {
    return new Rectangle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rectangle {
    return new Rectangle().fromJsonString(jsonString, options);
  }

  static equals(a: Rectangle | PlainMessage<Rectangle> | undefined, b: Rectangle | PlainMessage<Rectangle> | undefined): boolean {
    return proto3.util.equals(Rectangle, a, b);
  }
}

/**
 * A feature names something at a given point.
 *
 * If a feature could not be named, the name is empty.
 *
 * @generated from message routeguide.Feature
 */
export class Feature extends Message<Feature> {
  /**
   * The name of the feature.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The point where the feature is detected.
   *
   * @generated from field: routeguide.Point location = 2;
   */
  location?: Point;

  constructor(data?: PartialMessage<Feature>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "routeguide.Feature";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "location", kind: "message", T: Point },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Feature {
    return new Feature().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Feature {
    return new Feature().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Feature {
    return new Feature().fromJsonString(jsonString, options);
  }

  static equals(a: Feature | PlainMessage<Feature> | undefined, b: Feature | PlainMessage<Feature> | undefined): boolean {
    return proto3.util.equals(Feature, a, b);
  }
}

/**
 * A RouteNote is a message sent while at a given point.
 *
 * @generated from message routeguide.RouteNote
 */
export class RouteNote extends Message<RouteNote> {
  /**
   * The location from which the message is sent.
   *
   * @generated from field: routeguide.Point location = 1;
   */
  location?: Point;

  /**
   * The message to be sent.
   *
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<RouteNote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "routeguide.RouteNote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "message", T: Point },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteNote {
    return new RouteNote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteNote {
    return new RouteNote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteNote {
    return new RouteNote().fromJsonString(jsonString, options);
  }

  static equals(a: RouteNote | PlainMessage<RouteNote> | undefined, b: RouteNote | PlainMessage<RouteNote> | undefined): boolean {
    return proto3.util.equals(RouteNote, a, b);
  }
}

/**
 * A RouteSummary is received in response to a RecordRoute rpc.
 *
 * It contains the number of individual points received, the number of
 * detected features, and the total distance covered as the cumulative sum of
 * the distance between each point.
 *
 * @generated from message routeguide.RouteSummary
 */
export class RouteSummary extends Message<RouteSummary> {
  /**
   * The number of points received.
   *
   * @generated from field: int32 point_count = 1;
   */
  pointCount = 0;

  /**
   * The number of known features passed while traversing the route.
   *
   * @generated from field: int32 feature_count = 2;
   */
  featureCount = 0;

  /**
   * The distance covered in metres.
   *
   * @generated from field: int32 distance = 3;
   */
  distance = 0;

  /**
   * The duration of the traversal in seconds.
   *
   * @generated from field: int32 elapsed_time = 4;
   */
  elapsedTime = 0;

  constructor(data?: PartialMessage<RouteSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "routeguide.RouteSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "feature_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "distance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "elapsed_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteSummary {
    return new RouteSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteSummary {
    return new RouteSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteSummary {
    return new RouteSummary().fromJsonString(jsonString, options);
  }

  static equals(a: RouteSummary | PlainMessage<RouteSummary> | undefined, b: RouteSummary | PlainMessage<RouteSummary> | undefined): boolean {
    return proto3.util.equals(RouteSummary, a, b);
  }
}

